Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1.1'!!PolyStream methodsFor: 'getting' stamp: 'Koren 1/28/2024 20:01'!block	^ block! !!PolyStream methodsFor: 'calculative' stamp: 'Koren 1/28/2024 20:14'!addCoef: coef withExp: exp	| operation |	operation := Dictionary new.	((coef isKindOf: Integer) and: [exp isKindOf: Integer])	ifTrue: [		exp<0		ifTrue: [			self error: 'invalid input'.			]		ifFalse: [			operation at: exp put: coef.			block value: operation.			]		]	ifFalse: [		self error: 'invalid input'.		].! !!PolyStream methodsFor: 'calculative' stamp: 'Koren 1/28/2024 20:25'!substiture: anInteger	|operation|	(anInteger isKindOf: Integer)	ifTrue: [		anInteger=0		ifTrue: [			self error: 'invalid input'.			] 		ifFalse: [			operation := Array new: 2.			operation at: 1 put: anInteger ; at: 2 put: anInteger.			block value: operation.			]		]	ifFalse: [		self error: 'invalid input'.		]! !!PolyStream methodsFor: 'initialize-release' stamp: 'Koren 1/28/2024 20:34'!initialize	|operationList polyDict|	operationList := LinkedList new.	polyDict := Dictionary new.	block := [ :operation |		(operation isKindOf: Bag)		ifTrue: [			"Logic for the eval operation"			]		ifFalse: [			"Add operation to operationList"			operationList add: operation.			].		]! !