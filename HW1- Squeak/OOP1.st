Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'getting' stamp: 'marina 1/25/2024 18:00'!coef	^coef! !!Monom methodsFor: 'getting' stamp: 'marina 1/25/2024 18:00'!exp	^exp! !!Monom methodsFor: 'actions' stamp: 'marina 1/25/2024 19:23'!derivative	| monomDeriative |	monomDeriative := Monom new.	((exp = 0) or: [coef = 0])	ifTrue: [		^monomDeriative	]	ifFalse: [		monomDeriative coef: ((self coef)  * (self exp)).		monomDeriative exp: ((self exp) - 1).		^monomDeriative	]! !!Monom methodsFor: 'setting' stamp: 'marina 1/25/2024 18:01'!coef: anInteger	(anInteger isKindOf: Integer)	ifTrue: [		coef := anInteger.		^self	]	ifFalse: [		self error: 'invalid input'	]! !!Monom methodsFor: 'setting' stamp: 'marina 1/25/2024 18:01'!exp: anInteger	((anInteger isKindOf: Integer) and: [anInteger>=0])	ifTrue: [		exp := anInteger.		^self	]	ifFalse: [		self error: 'invalid input'	]! !!Monom methodsFor: 'initialize-release' stamp: 'marina 1/25/2024 17:57'!initialize	exp := 0.	coef := 0.	^self! !TestCase subclass: #MonomTest	instanceVariableNames: 'monA monB monC'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!MonomTest methodsFor: 'testing' stamp: 'marina 1/25/2024 19:09'!testCoef	monA coef: -3.	self assert: ((monA coef ) = -3).		monC coef: 4.	self assert: ((monC coef ) = 4).		monA coef: 3.5 .	self assert: ((monA coef ) = -3).		monC coef: 'hi'.      self assert: ((monC coef ) = 4).! !!MonomTest methodsFor: 'testing' stamp: 'marina 1/25/2024 19:26'!testDerivative	| tempMon |	monA coef: -3; exp:5.	monB exp:6.	monC coef: 4.	tempMon := monA derivative.	self assert: ((monA coef ) = -3).	self assert: ((monA exp ) = 5).	self assert: ((tempMon coef ) = -15).	self assert: ((tempMon exp ) = 4).		tempMon := monB derivative.	self assert: ((monB coef ) = 0).	self assert: ((monB exp ) = 6).	self assert: ((tempMon coef ) = 0).	self assert: ((tempMon exp ) = 0).		tempMon := monC derivative.	self assert: ((monC coef ) = 4).	self assert: ((monC exp ) = 0).	self assert: ((tempMon coef ) = 0).	self assert: ((tempMon exp ) = 0).! !!MonomTest methodsFor: 'testing' stamp: 'marina 1/25/2024 19:15'!testExp	monA exp: 5.	self assert: ((monA exp ) = 5).		monB exp: 6.	self assert: ((monB exp ) = 6).		monA exp: 'hi'.	self assert: ((monA exp ) = 5).		monB exp: 6.5.	self assert: ((monB exp ) = 6).		monB exp: -6.	self assert: ((monB exp ) = 6).		monC exp: 0.	self assert: ((monC exp ) = 0).! !!MonomTest methodsFor: 'initialize-release' stamp: 'marina 1/25/2024 18:58'!setUp	monA := Monom new.	monB := Monom new.	monC := Monom new.! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'initialize-release' stamp: 'marina 1/25/2024 19:36'!initialize	monoms := Monom new.	^self! !