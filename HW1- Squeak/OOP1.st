Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'getting' stamp: 'marina 1/25/2024 18:00'!coef	^coef! !!Monom methodsFor: 'getting' stamp: 'marina 1/25/2024 18:00'!exp	^exp! !!Monom methodsFor: 'actions' stamp: 'marina 1/26/2024 21:49'!derivative	| monomDeriative |	monomDeriative := Monom new.	((exp = 0) or: [coef = 0])	ifTrue: [		^monomDeriative	]	ifFalse: [		monomDeriative coef: ((self coef)  * (self exp)).		monomDeriative exp: ((self exp) - 1).		^monomDeriative	]! !!Monom methodsFor: 'setting' stamp: 'marina 1/25/2024 18:01'!coef: anInteger	(anInteger isKindOf: Integer)	ifTrue: [		coef := anInteger.		^self	]	ifFalse: [		self error: 'invalid input'	]! !!Monom methodsFor: 'setting' stamp: 'marina 1/25/2024 18:01'!exp: anInteger	((anInteger isKindOf: Integer) and: [anInteger>=0])	ifTrue: [		exp := anInteger.		^self	]	ifFalse: [		self error: 'invalid input'	]! !!Monom methodsFor: 'initialize-release' stamp: 'marina 1/25/2024 17:57'!initialize	exp := 0.	coef := 0.	^self! !TestCase subclass: #MonomTest	instanceVariableNames: 'monA monB monC'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!MonomTest methodsFor: 'testing' stamp: 'marina 1/25/2024 19:09'!testCoef	monA coef: -3.	self assert: ((monA coef ) = -3).		monC coef: 4.	self assert: ((monC coef ) = 4).		monA coef: 3.5 .	self assert: ((monA coef ) = -3).		monC coef: 'hi'.      self assert: ((monC coef ) = 4).! !!MonomTest methodsFor: 'testing' stamp: 'marina 1/25/2024 19:26'!testDerivative	| tempMon |	monA coef: -3; exp:5.	monB exp:6.	monC coef: 4.	tempMon := monA derivative.	self assert: ((monA coef ) = -3).	self assert: ((monA exp ) = 5).	self assert: ((tempMon coef ) = -15).	self assert: ((tempMon exp ) = 4).		tempMon := monB derivative.	self assert: ((monB coef ) = 0).	self assert: ((monB exp ) = 6).	self assert: ((tempMon coef ) = 0).	self assert: ((tempMon exp ) = 0).		tempMon := monC derivative.	self assert: ((monC coef ) = 4).	self assert: ((monC exp ) = 0).	self assert: ((tempMon coef ) = 0).	self assert: ((tempMon exp ) = 0).! !!MonomTest methodsFor: 'testing' stamp: 'marina 1/25/2024 19:15'!testExp	monA exp: 5.	self assert: ((monA exp ) = 5).		monB exp: 6.	self assert: ((monB exp ) = 6).		monA exp: 'hi'.	self assert: ((monA exp ) = 5).		monB exp: 6.5.	self assert: ((monB exp ) = 6).		monB exp: -6.	self assert: ((monB exp ) = 6).		monC exp: 0.	self assert: ((monC exp ) = 0).! !!MonomTest methodsFor: 'initialize-release' stamp: 'marina 1/25/2024 18:58'!setUp	monA := Monom new.	monB := Monom new.	monC := Monom new.! !Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'calculative' stamp: 'marina 1/26/2024 18:04'!addMonom: aMonom	(aMonom isKindOf: Monom) "CHECK IF aMonom IS MONOM OBJECT"	ifTrue: [		|checkIfZeroPol newMon tempCoef |		(aMonom coef = 0) ifTrue:[^self].  "IF WE RECIEVED 0 AS A POLYNOM- DO NOTHING"				checkIfZeroPol := monoms at: 0 ifAbsent: [nil].		(checkIfZeroPol isNil)		ifFalse:[			(checkIfZeroPol coef = 0)			ifTrue:[monoms removeAll.]			].      "CHECK IF THE CURRENT POLYNOM IS STILL ZERO POLYNOM. IF IT IS- WE WANT TO REMOVE THAT 				                             MONOM FROM IT"				newMon := monoms at: (aMonom exp) ifAbsent: [nil].		(newMon isNil)		ifTrue: [			newMon := Monom new.			newMon coef: (aMonom coef).			] "IF THERE IS NO OTHER MONOM WITH THE SAME EXPONENT-WE CREATE A NEW MONOM"		ifFalse: [			tempCoef := (newMon coef) + (aMonom coef).			newMon coef: tempCoef.			monoms removeKey: (aMonom exp).			]. "IF WE FOUND A MONOM WITH THE SAME EXPONENT- WE JUST MODIFY THAT MONOM"				newMon exp: (aMonom exp).		monoms at: (aMonom exp) put: newMon.		^self		]		ifFalse: [		self error: 'invalid input'.		]! !!Polynom methodsFor: 'calculative' stamp: 'marina 1/26/2024 19:09'!eval: anInteger	|result|	result := 0.		(anInteger isKindOf: Integer)	ifTrue: [		monoms do:[ :value |			| temp adden |				adden := result.			(value exp=0) "IF THE EXPONENT IS ZERO, WE WANT TO AVOID 0^0"			ifTrue:[temp := value coef.]			ifFalse:[temp := (value coef)* (anInteger raisedTo: (value exp)).].						result := temp + adden.			]. 				^result		]	ifFalse: [		self error: 'invalid input'.		]! !!Polynom methodsFor: 'calculative' stamp: 'marina 1/26/2024 19:07'!multiplyByMonom: aMonom	| resPolynom |	(aMonom isKindOf: Monom)	ifTrue: [		resPolynom := Polynom new.		monoms do:[ :value |			| tempExp tempCoef tempMonom |					tempExp := (value exp) + (aMonom exp).			tempCoef := (value coef) * (aMonom coef).						tempMonom := Monom new.			tempMonom exp: tempExp; coef: tempCoef.			resPolynom addMonom: tempMonom.			]. "CALCULATE THE RESULT POLYNOM: MULTIPLY EACH MONOM IT THE POLYNOM BY THE GIVEN MONOM "		monoms removeAll.		monoms addAll: (resPolynom monoms).		"UPDATE THE CURRENT POLYNOM TO THE RESULT"		^self		]	ifFalse: [		self error: 'invalid input'.		]	! !!Polynom methodsFor: 'informative' stamp: 'marina 1/26/2024 17:27'!monoms	^monoms! !!Polynom methodsFor: 'informative' stamp: 'marina 1/26/2024 17:23'!showPol	 monoms do: [ :value |	  Transcript show:((value coef) asString ,'*x^',(value exp) asString) ; cr.			].	Transcript show:'Pol End' ; cr.	! !!Polynom methodsFor: 'initialize-release' stamp: 'marina 1/26/2024 14:28'!initialize	| zeroPol |	monoms := Dictionary new.	zeroPol := Monom new.	monoms at: 0 put: zeroPol.	^self! !TestCase subclass: #PolynomTest	instanceVariableNames: 'polA monA monB monC monD monE'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolynomTest methodsFor: 'testing' stamp: 'marina 1/26/2024 18:31'!testAddMonom	polA addMonom: monE.	self assert:((polA monoms)size = 1).	polA addMonom: monA.	self assert:((polA monoms)size = 1).	self assert:(((polA monoms)at:5) coef = -3).	polA addMonom: monE.	self assert:((polA monoms)size = 1).	self assert:(((polA monoms)at:5) coef = -3).	polA addMonom: monC.	self assert:((polA monoms)size = 1).	self assert:(((polA monoms)at:5) coef = 1).	polA addMonom: monB.	polA addMonom: monD.	self assert:((polA monoms)size = 3).	self assert:(((polA monoms)at:5) coef = 1).	self assert:(((polA monoms)at:6) coef = 1).	self assert:(((polA monoms)at:3) coef = 5).		monD exp:8;coef:8.	self assert:((polA monoms)size = 3).	self assert:(((polA monoms)at:5) coef = 1).	self assert:(((polA monoms)at:6) coef = 1).	self assert:(((polA monoms)at:3) coef = 5).	      monE coef:7.	polA addMonom: monE.	self assert:((polA monoms)size = 4).	self assert:(((polA monoms)at:5) coef = 1).	self assert:(((polA monoms)at:6) coef = 1).	self assert:(((polA monoms)at:3) coef = 5).	self assert:(((polA monoms)at:0) coef = 7).! !!PolynomTest methodsFor: 'testing' stamp: 'marina 1/26/2024 18:53'!testEval	polA addMonom: monA.	polA addMonom: monC.	polA addMonom: monB.	polA addMonom: monD.	monE coef:7.	polA addMonom: monE.	self assert:((polA eval: 0) = 7).	self assert:((polA eval: 1) =14).	self assert:((polA eval: 2 )= 143).	self assert:((polA eval: -1) = 2).	! !!PolynomTest methodsFor: 'testing' stamp: 'marina 1/26/2024 19:01'!testMultiplyByMonom	polA addMonom: monA.	polA addMonom: monC.	polA addMonom: monB.	polA addMonom: monD.	monE coef:7.	polA addMonom: monE.		polA multiplyByMonom: monD.	monD coef: 3.		self assert:((polA monoms)size = 4).	self assert:(((polA monoms)at:8) coef = 5).	self assert:(((polA monoms)at:9) coef = 5).	self assert:(((polA monoms)at:6) coef = 25).	self assert:(((polA monoms)at:3) coef = 35).		monE coef: 0.	polA multiplyByMonom: monE.		self assert:((polA monoms)size = 1).	self assert:(((polA monoms)at:0) coef = 0).! !!PolynomTest methodsFor: 'initialize-release' stamp: 'marina 1/26/2024 18:55'!initialize	polA := Polynom new.	monA := Monom new.	monA exp:5; coef:-3.	monB := Monom new.	monB exp:6; coef:1.	monC := Monom new.	monC exp:5; coef:4.	monD := Monom new.	monD exp:3; coef:5.	monE := Monom new.	^self! !